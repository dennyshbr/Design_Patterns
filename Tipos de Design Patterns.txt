1 - Design Patterns Criacionais:

	Fornecem meios para criar/instanciar objetos, encapsulando a lógica de criação deles

	* Abstract Factory: Criam famílias de objetos on the fly com alta flexibilidade;
	* Builder: Constrói o produto passo a passo;
	* Factory Method: Cria objetos on the fly com alta flexibilidade;
	* Prototype: Permite a criação de novos objetos a partir da cópia de um modelo original ou protótipo;
	* Singleton: Centraliza e compartilha recursos.

2 - Design Patterns Estruturais

	Tratam da relação entre os objetos e como eles interagem entre si
	Eles descrevem maneiras de compor objetos para realizar novas funcionalidades, sem adicionar complexicidade e garantindo a flexibilidade.

	* Adapter: Pluga o conteúdo ao sistema;
	* Bridge: Separa implementações de abstrações em prol da flexibilidade;
	* Composite: Trata todos os objetos de forma justa;
	* Decorator: Incrementa funcionalidades de forma dinâmica;
	* Facade: Simplifica a utilização de subsistemas complexos;
	* Flyweight: Compartilha pequenos recursos para economizar espaço;
	* Proxy: Faz com que um objeto represente outro objeto.

3 - Design Patterns Comportamentais

	Estes padrões estão focados na comunicação entre os objetos
	Definem a maneira como classes ou objetos interagem e distribuem responsabilidades:

	* Chain of Responsibility: Repassa as requisições para evitar a dependência entre um objeto receptor e o solicitante. Com isso, permite que outros objetos da cadeia tenham a oportunidade de tratar tal solicitação;
	* Command: Transforma requisições em objetos;
	* Interpreter: Define uma gramática e um interpretador;
	* Iterator: Percorre um conjunto de dados independentes da implementação;
	* Mediator: É um simplificador de relacionamentos complexos;
	* Memento: Externaliza estados sem quebrar o encapsulamento;
	* Observer: Realiza o compartilhamento de recursos de maneira inteligente;
	* State: É considerado muito importante porque simplifica a troca de estados internos de objetos;
	* Strategy: Separa os dados dos algoritmos para que possam ser reutilizados;
	* Template Method: Define algoritmos extensíveis;
	* Visitor: Define uma nova operação para uma classe sem alterá-la.

Links para maiores detalhes: https://bgasparotto.com/pt/design-patterns/